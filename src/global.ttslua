require("shared/_module")
require("windows/_module")

current_bank = {}

game_settings = {
  initialized = false,
  showLabels = false,
  rotateBank = true,
  enableTools = true
}

player_data = {
    Purple = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Red = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Green = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Blue = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    }
}

--- Rotates the bank to look at the side of the board based on whose turn it is
function onPlayerTurnStart(current, previous)
    if previous == nil or previous == '' then return end

    bank.restack()
    bank.rotateBankForColor(current)
end

-------- Table Value Tracking

function onObjectEnterContainer(container, object)
    scoreboard.refreshDeckOnContainerChange(container)
end

function onObjectLeaveContainer(container, object)
    if object.tag == 'Tile' then
        object.setCustomObject({
            stackable = false
        })
    end

    scoreboard.refreshDeckOnContainerChange(container)
end

function onObjectEnterScriptingZone(zone, object)
    scoreboard.refreshCountsOnZoneChange(zone, object)
end

function onObjectLeaveScriptingZone(zone, object)
    scoreboard.refreshCountsOnZoneChange(zone, object)
end

function onLoad(save_state)
    if save_state ~= "" then
        local loaded_data = JSON.decode(save_state)
        player_data = loaded_data.player_data
        
        -- TODO: Verify this works as expected
        if loaded_data.current_player ~= nil then
            Turns.turn_color = loaded_data.current_player
        end

        if loaded_data.game_settings ~= nil then
            game_settings = loaded_data.game_settings
        end
    end

    MegaFreeze()
    windows.initialize()
    scoreboard.updatePlayers()
end

function onSave()
    saved_data = JSON.encode({
        player_data = player_data,
        game_settings = game_settings,
        current_player = Turns.turn_color
    })

    -- saved_data = ""
    return saved_data
end

function onPlayerChangeColor(color)
    scoreboard.updatePlayers()
end

function MegaFreeze()
    local freezeByZone = {} -- Place GUIDs of script zones here
    local freezeByGUID = {
        "6b6799", -- All puzzle chips bag
        "5e08f3", -- Bottom row bank bag
        constants.character_sheet, -- Character sheet
        "f45a6c", -- Character chip platform
        "0c2d22", -- Puzzle chip platform
    } -- Place GUIDs of individual Objects here

    -- Add player mats
    for _,id in pairs(constants.player_mats) do
      table.insert(freezeByGUID, id)
    end

    -- Backgrounds for chips
    for _, id in ipairs(constants.placeholders) do
      local obj = getObjectFromGUID(id)
      obj.setLock(true)
      obj.interactable = false
    end

    for _, obj in pairs(getAllObjects()) do
      if obj.getName() == 'MegaFreeze' then
        obj.setLock(true)
        obj.interactable = false
      elseif obj.getDescription() == 'MegaFreeze' then
        obj.setLock(true)
        obj.interactable = false
      else
        for _, guid in pairs(freezeByGUID) do if obj.getGUID() == guid then obj.interactable = false end end
      end
    end

    -- Freeze Objects by Zone
    for _, zone in pairs(freezeByZone) do for _, obj in pairs(getObjectFromGUID(zone).getObjects()) do obj.interactable = false end end
end
