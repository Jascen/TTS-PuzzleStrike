require("constants")
require("setup")
require("bank")
require("utility")
require("windows/_bindings")
require("windows/_utility")
require("windows/tools/tools")
require("windows/scoreboard/scoreboard")

current_bank = {}

game_settings = {
  initialized = false,
  showLabels = false,
  rotateBank = true,
  enableTools = true
}

player_data = {
    Purple = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Red = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Green = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Blue = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    }
}

show = {
    Purple = {
        currentId = 1
    },
    Red = {
        currentId = 1
    },
    Green = {
        currentId = 1
    },
    Blue = {
        currentId = 1
    },

    Scoreboard = {
        Purple = {
            visible = true
        },
        Red = {
            visible = true
        },
        Green = {
            visible = true
        },
        Blue = {
            visible = true
        }
    }
}

--- Rotates the bank to look at the side of the board based on whose turn it is
function onPlayerTurnStart(current, previous)
    if previous == nil or previous == '' then return end

    local bankZone = getObjectFromGUID(constants.bank_zone)
    if bankZone == nil then return end

    local bankObjects = bankZone.getObjects()
    if bankObjects == nil then return end

    -- Build unique list of highest object count
    for _, o in pairs(getObjectFromGUID(constants.bank_zone).getObjects()) do
        if o.getLock() ~= true and o.tag == 'Tile' then
            local name = o.getName()
            if name ~= nil and name ~= "" then
                local bank_object = current_bank[name]
                if bank_object ~= nil then
                    local p = bank_object.position
                    o.setPositionSmooth({
                        p[1],
                        p[2] + 1,
                        p[3]
                    }, false, true)
                else
                    local bag = constants.bags[name]
                    if bag ~= nil and bag.id ~= nil then
                            getObjectFromGUID(bag.id).putObject(o)
                    end
                end
            end
        end
    end

  bank.rotateBankForColor(current)
end

-------- Table Value Tracking

function onObjectEnterContainer(container, object)
    scoreboard.refreshDeckOnContainerChange(container)
end

function onObjectLeaveContainer(container, object)
    if object.tag == 'Tile' then
        object.setCustomObject({
            stackable = false
        })
    end

    scoreboard.refreshDeckOnContainerChange(container)
end

function onObjectEnterScriptingZone(zone, object)
    scoreboard.refreshCountsOnZoneChange(zone, object)
end

function onObjectLeaveScriptingZone(zone, object)
    scoreboard.refreshCountsOnZoneChange(zone, object)
end

function countObjectsInContainer(container)
    local count = 0
    if container ~= nil then for _, object in ipairs(container.getObjects()) do count = count + 1 end end

    return count
end

function countObjects(zone)
    local count = 0
    if zone ~= nil then 
      for _, object in ipairs(zone.getObjects()) do 
        local id = object.getGUID()
        -- Never count the player mat as an object
        if isPlayerMat(id) ~= true then
          count = count + getAmount(object) 
        end
      end
    end

    return count
end

function isPlayerMat(id)
  for i=1,#constants.player_mats do
     if constants.player_mats[i] == id then 
        return true
     end
  end
  return false
end

function countGems(zone)
    local count = 0
    if zone ~= nil then for _, object in ipairs(zone.getObjects()) do count = count + countGem(object) end end

    return count
end

function getAmount(object)
    local amount = object.getQuantity()
    if amount < 1 then return 1 end
    return amount
end

function countGem(object)
    local name = object.getName()
    if name:match("%d Gem") then return getAmount(object) * string.match(name, "%d") end

    return 0
end

----- ?????

function onLoad(save_state)
    if save_state ~= "" then
        local loaded_data = JSON.decode(save_state)
        player_data = loaded_data.player_data
        
        -- TODO: Verify this works as expected
        if loaded_data.current_player ~= nil then
            Turns.turn_color = loaded_data.current_player
        end

        if loaded_data.game_settings ~= nil then
            game_settings = loaded_data.game_settings
        end
    end

    applyGameSettings()
    MegaFreeze()
    updatePlayers()
end

function applyGameSettings()
    if game_settings.initialized == true then
      UI.setAttribute("NewGame", "active", false)
    else
      UI.setAttribute("NewGame", "active", true)
    end

    if game_settings.enableTools == true then
        UI.setAttribute("Tools", "active", true)
        UI.setAttribute("ShowTools", "isOn", true)
      else
        UI.setAttribute("Tools", "active", false)
        UI.setAttribute("ShowTools", "isOn", false)
    end

    if game_settings.showLabels == true then
        UI.setAttribute("ShowBankLabels", "isOn", true)
      else
        UI.setAttribute("ShowBankLabels", "isOn", false)
    end

    if game_settings.rotateBank == true then
        UI.setAttribute("RotateBank", "isOn", true)
        bank.rotateBankForColor(Turns.turn_color)
    else
        UI.setAttribute("RotateBank", "isOn", false)
    end
end

function onSave()
    saved_data = JSON.encode({
        player_data = player_data,
        game_settings = game_settings,
        current_player = Turns.turn_color
    })

    -- saved_data = ""
    return saved_data
end

function updatePlayers()
    local players = Player.getPlayers()
    local seats = {}
    for _, color in pairs(Player.getAvailableColors()) do seats[color] = false end

    for _, player in pairs(players) do if player.color ~= nil and player.color ~= "" then seats[player.color] = player.steam_name end end

    for color, player in pairs(seats) do
        if player ~= nil and player ~= "" and player ~= false then
            UI.setAttribute(color .. "_name", "text", player)
            UI.setAttribute(color, "active", true)
        else
            UI.setAttribute(color, "active", false)
        end
    end
end

function onPlayerChangeColor(color)
    updatePlayers()
end

-- UI - New Game --
mode = constants.modes.random

-- UI - New Game --

-- UI - Character Selection --

function makeDeck(player)
    local playerHand = player.getPlayerHand()
    if playerHand then
      local crash_bag = getObjectFromGUID(constants.bags["Crash"].id)
      local gem_bag = getObjectFromGUID(constants.bags["1 Gem"].id)
      if crash_bag ~= nil and gem_bag ~= nil then
        crash_bag.deal(1, player.color)
        gem_bag.deal(6, player.color)
        return true
      end
    end
end

-- UI - Character Selection --

function MegaFreeze()
    local freezeByZone = {} -- Place GUIDs of script zones here
    local freezeByGUID = {
        "6b6799", -- All puzzle chips bag
        "5e08f3", -- Bottom row bank bag
        constants.character_sheet, -- Character sheet
        "f45a6c", -- Character chip platform
        "0c2d22", -- Puzzle chip platform
    } -- Place GUIDs of individual Objects here

    -- Add player mats
    for _,id in pairs(constants.player_mats) do
      table.insert(freezeByGUID, id)
    end

    -- Backgrounds for chips
    for _, id in ipairs(constants.placeholders) do
      local obj = getObjectFromGUID(id)
      obj.setLock(true)
      obj.interactable = false
    end

    for _, obj in pairs(getAllObjects()) do
      if obj.getName() == 'MegaFreeze' then
        obj.setLock(true)
        obj.interactable = false
      elseif obj.getDescription() == 'MegaFreeze' then
        obj.setLock(true)
        obj.interactable = false
      else
        for _, guid in pairs(freezeByGUID) do if obj.getGUID() == guid then obj.interactable = false end end
      end
    end

    -- Freeze Objects by Zone
    for _, zone in pairs(freezeByZone) do for _, obj in pairs(getObjectFromGUID(zone).getObjects()) do obj.interactable = false end end
end
