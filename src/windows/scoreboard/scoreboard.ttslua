scoreboard = {}

scoreboard.Rows = {
    Purple = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Red = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Green = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    },
    Blue = {
        pile = 0,
        hand = 0,
        discard = 0,
        bag = 0,
        ongoing = 0
    }
}

function scoreboard.updateDeckSize(color)
    local o = scoreboard.Rows[color]
    local count = o.hand + o.discard + o.bag + o.ongoing
    UI.setAttribute(color .. "_deck", "text", count)
end

function scoreboard.refreshDeckOnContainerChange(container)    
    local container_id = container.getGUID()
    for color, o in pairs(constants.zones) do
        for key, id in pairs(o) do
            if container_id == id then
                if key == "deck" then
                    local count = scoreboard.countObjectsInContainer(container)
                    scoreboard.Rows[color].bag = count
                    scoreboard.updateDeckSize(color)
                end
            end
        end
    end
end

function scoreboard.refreshCountsOnZoneChange(zone, object)
    local zone_id = zone.getGUID()
    for color, o in pairs(constants.zones) do
        for key, id in pairs(o) do
            if zone_id == id then
                if key == "pile" then -- Count gem pile
                    local name = object.getName()
                    if name:match("%d Gem") then
                        local count = utility.countGems(zone)
                        scoreboard.updateRow(color, count)
                    end

                    return
                elseif key == "discard" then -- Count discard
                    local count = scoreboard.countObjects(zone)
                    scoreboard.Rows[color].discard = count
                    scoreboard.updateDeckSize(color)
                elseif key == "hand" then -- Count hand
                    local count = scoreboard.countObjects(zone)
                    scoreboard.Rows[color].hand = count
                    UI.setAttribute(color .. "_hand", "text", count)
                    scoreboard.updateDeckSize(color)
                elseif key == "ongoing" then -- Count ongoing
                    local count = scoreboard.countObjects(zone)
                    scoreboard.Rows[color].ongoing = count
                    scoreboard.updateDeckSize(color)
                end
            end
        end
    end
end

function scoreboard.updateRow(color, count)
    UI.setAttribute(color .. "_pile", "text", count)
    if 9 < count then
        UI.setAttribute(color, "color", "rgba(1, 0, 0, 0.31)")
    elseif 8 < count then
        UI.setAttribute(color, "color", "rgba(1, 0.5, 0, 0.31)")
    elseif 5 < count then
        UI.setAttribute(color, "color", "rgba(1, 1, 0, 0.31)")
    elseif 2 < count then
        UI.setAttribute(color, "color", "rgba(0, 1, 0, 0.31)")
    else
        UI.setAttribute(color, "color", "rgba(0, 0, 0, 0)")
    end
end

function scoreboard.countObjectsInContainer(container)
    local count = 0
    if container ~= nil then for _, object in ipairs(container.getObjects()) do count = count + 1 end end

    return count
end

function scoreboard.countObjects(zone)
    local count = 0
    if zone ~= nil then 
      for _, object in ipairs(zone.getObjects()) do 
        local id = object.getGUID()
        -- Never count the player mat as an object
        if utility.isPlayerMat(id) ~= true then
          count = count + utility.getAmount(object) 
        end
      end
    end

    return count
end

function scoreboard.minimize(player)
    windowUtil.showForPlayer(player, "Scoreboard_content", show["Scoreboard"])
end

function scoreboard.updatePlayers()
    local players = Player.getPlayers()
    local seats = {}
    for _, color in pairs(Player.getAvailableColors()) do seats[color] = false end

    for _, player in pairs(players) do if player.color ~= nil and player.color ~= "" then seats[player.color] = player.steam_name end end

    for color, player in pairs(seats) do
        if player ~= nil and player ~= "" and player ~= false then
            UI.setAttribute(color .. "_name", "text", player)
            UI.setAttribute(color, "active", true)
        else
            UI.setAttribute(color, "active", false)
        end
    end
end