scoreboard = {}

function scoreboard.updateDeckSize(color)
    local o = player_data[color]
    local count = o.hand + o.discard + o.bag + o.ongoing
    UI.setAttribute(color .. "_deck", "text", count)
end

function scoreboard.refreshDeckOnContainerChange(container)    
    local container_id = container.getGUID()
    for color, o in pairs(constants.zones) do
        for key, id in pairs(o) do
            if container_id == id then
                if key == "deck" then
                    local count = scoreboard.countObjectsInContainer(container)
                    player_data[color].bag = count
                    scoreboard.updateDeckSize(color)
                end
            end
        end
    end
end

function scoreboard.refreshCountsOnZoneChange(zone, object)
    local zone_id = zone.getGUID()
    for color, o in pairs(constants.zones) do
        for key, id in pairs(o) do
            if zone_id == id then
                if key == "pile" then -- Count gem pile
                    local name = object.getName()
                    if name:match("%d Gem") then
                        local count = utility.countGems(zone)
                        scoreboard.updateRow(color, count)
                    end

                    return
                elseif key == "discard" then -- Count discard
                    local count = scoreboard.countObjects(zone)
                    player_data[color].discard = count
                    scoreboard.updateDeckSize(color)
                elseif key == "hand" then -- Count hand
                    local count = scoreboard.countObjects(zone)
                    player_data[color].hand = count
                    UI.setAttribute(color .. "_hand", "text", count)
                    scoreboard.updateDeckSize(color)
                elseif key == "ongoing" then -- Count ongoing
                    local count = scoreboard.countObjects(zone)
                    player_data[color].ongoing = count
                    scoreboard.updateDeckSize(color)
                end
            end
        end
    end
end

function scoreboard.updateRow(color, count)
    UI.setAttribute(color .. "_pile", "text", count)
    if 9 < count then
        UI.setAttribute(color, "color", "rgba(1, 0, 0, 0.31)")
    elseif 8 < count then
        UI.setAttribute(color, "color", "rgba(1, 0.5, 0, 0.31)")
    elseif 5 < count then
        UI.setAttribute(color, "color", "rgba(1, 1, 0, 0.31)")
    elseif 2 < count then
        UI.setAttribute(color, "color", "rgba(0, 1, 0, 0.31)")
    else
        UI.setAttribute(color, "color", "rgba(0, 0, 0, 0)")
    end
end

function scoreboard.countObjectsInContainer(container)
    local count = 0
    if container ~= nil then for _, object in ipairs(container.getObjects()) do count = count + 1 end end

    return count
end

function scoreboard.countObjects(zone)
    local count = 0
    if zone ~= nil then 
      for _, object in ipairs(zone.getObjects()) do 
        local id = object.getGUID()
        -- Never count the player mat as an object
        if utility.isPlayerMat(id) ~= true then
          count = count + utility.getAmount(object) 
        end
      end
    end

    return count
end