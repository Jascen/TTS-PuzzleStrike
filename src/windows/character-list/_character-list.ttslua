characterList = {}

function characterList.buildMap()
    -- Build the Name to Index charcter map
    character_map = {}
    local i = 1
    for k, character in pairs(characters) do
        table.insert(character_map, k)
        character.index = i
        i = i + 1
    end

    -- TODO: Required ???
    local character_bag = getObjectFromGUID("87a183")
    character_bag.interactable = false
end

function characterList.nextChar(player)
    local currentId = show.CharacterList[player.color].currentId
    local name = character_map[currentId + 1]
    if name ~= nil then
        local character = characters[name]
        if character ~= nil then characterList.inspectCharacter(player, character, name) end

        show.CharacterList[player.color].currentId = currentId + 1
    end
end

function characterList.prevChar(player)
    local currentId = show.CharacterList[player.color].currentId
    local name = character_map[currentId - 1]
    if name ~= nil then
        local character = characters[name]
        if character ~= nil then characterList.inspectCharacter(player, character, name) end
        show.CharacterList[player.color].currentId = currentId - 1
    end
end

function characterList.optionSelected(player, name)
    local character = characters[name]
    if character ~= nil then
        characterList.inspectCharacter(player, character, name)
        show.CharacterList[player.color].currentId = character.index
    end
end

function characterList.inspectCharacter(player, character, name)
    UI.setAttribute(player.color .. "_char_name", "text", name)
    UI.setAttribute(player.color .. "_char_pic", "image", character.id)
    UI.setAttribute(player.color .. "_char_desc", "text", character.description)

    if name ~= "Beginner" then
        UI.setAttribute(player.color .. "_char_chip_1", "image", character.id .. "_1")
        UI.setAttribute(player.color .. "_char_chip_2", "image", character.id .. "_2")
        UI.setAttribute(player.color .. "_char_chip_3", "image", character.id .. "_3")
    else
        UI.setAttribute(player.color .. "_char_chip_1", "image", "setsuki_hiruki_1")
        UI.setAttribute(player.color .. "_char_chip_2", "image", "garus_rook_1")
        UI.setAttribute(player.color .. "_char_chip_3", "image", "valerie_rose_1")
    end
end

function characterList.selectChar(player)
    if game_settings.initialized ~= true then
        broadcastToAll(player.steam_name .. " cannot select a character the game has not started.", {
            0.8,
            0.05,
            0.05
        })
    else
      local name = character_map[show.CharacterList[player.color].currentId]
      if name ~= nil then
          local character = characters[name]
          if character ~= nil then
              local playerHand = player.getPlayerHand()
              if playerHand then
                  local success = Global.call("makeDeck", player)
                  if success == true then
                      for i, id in pairs(character.chips) do
                        local clone = getObjectFromGUID(id).clone()
                        Wait.condition(function()
                            clone.deal(1, player.color)
                        end, function()
                            return clone.getGUID() ~= id
                        end)
                      end
                  end
              else
                  broadcastToAll(player.steam_name .. " cannot select a character because the color " .. player.color .. " has no hand region.", {
                      0.8,
                      0.05,
                      0.05
                  })
              end
  
              characterList.closeWindow(player)
          end
      end
    end
end

function characterList.randomizeCharacter(player)
    local color = player.color
    if show.CharacterList[color] ~= nil then
      show.CharacterList[color].currentId = math.random(#character_map)
      
      characterList.selectCharacter(player)
    end
end

function characterList.selectCharacter(player)
    local color = player.color
    if show.CharacterList[color] ~= nil then
        local currentId = show.CharacterList[color].currentId
        local name = character_map[currentId]
        if name ~= nil then
            local character = characters[name]
            if character ~= nil then characterList.inspectCharacter(player, character, name) end
        end
    end
end

function characterList.closeWindow(player)
    UI.setAttribute(player.color .. "_CharacterList", "active", false)
end
