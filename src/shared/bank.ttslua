bank = {}

bank.current = {}

function bank.rotateBank(degree)

    -- Text labels
    local z = -1
    if degree == 180 then z = 1 end

    local i = 0
    for _, label in pairs(constants.labels) do
        local o = getObjectFromGUID(label)
        o.setPosition({
            x = -22.25 + (5 * i),
            y = 2,
            z = z
        })
        local rotation = o.getRotation()
        o.setRotation({
            rotation[1],
            degree + 180,
            rotation[3]
        })
        i = i + 1
    end

    for _, o in pairs(getObjectFromGUID(constants.bank_zone).getObjects()) do
        local rotation = o.getRotation()
        o.setRotation({
            rotation[1],
            degree,
            rotation[3]
        })
    end
end

function bank.rotateBankForColor(color)
    if game_settings.rotateBank == true then
      if color == "Purple" or color == "Red" then
        bank.rotateBank(180)
      elseif color == "Green" or color == "Blue" then
        bank.rotateBank(0)
      end
    end
end

function bank.restack()
    local bankZone = getObjectFromGUID(constants.bank_zone)
    if bankZone == nil then return end

    local bankObjects = bankZone.getObjects()
    if bankObjects == nil then return end

    -- Build unique list of highest object count
    for _, o in pairs(getObjectFromGUID(constants.bank_zone).getObjects()) do
        if o.getLock() ~= true and o.tag == 'Tile' then
            local name = o.getName()
            if name ~= nil and name ~= "" then
                local bank_object = bank.current[name]
                if bank_object ~= nil then
                    local p = bank_object.position
                    o.setPositionSmooth({
                        p[1],
                        p[2] + 1,
                        p[3]
                    }, false, true)
                else
                    local bag = constants.bags[name]
                    if bag ~= nil and bag.id ~= nil then
                        getObjectFromGUID(bag.id).putObject(o)
                    end
                end
            end
        end
    end
end